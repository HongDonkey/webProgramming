{
  "openapi": "3.0.3",
  "info": {
    "title": "Exchange API",
    "version": "unknown"
  },
  "servers": [
    {
      "url": "https://api.upbit.com/v1"
    }
  ],
  "components": {
    "securitySchemes": {}
  },
  "security": [
    {}
  ],
  "paths": {
    "/currencies": {
      "get": {
        "summary": "전체 currency 조회",
        "description": "",
        "operationId": "전체-currency-조회",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization Token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"code\": \"BTC\",\n    \"withdraw_fee\": \"0.00005\",\n    \"is_coin\": true,\n    \"wallet_state\": \"working\",\n    \"wallet_support\": [\"deposit\",\"withdraw\"]\n  }\n  # ...\n]"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "  const request = require(\"request\")\n  const sign = require(\"jsonwebtoken\").sign\n\n  const payload = {access_key: accessKey, nonce: (new Date).getTime()};\n  const token = sign(payload, secretKey);\n\n  var options = {\n    method: \"GET\",\n    url: \"https://api.upbit.com/v1/currencies\",\n    headers: {Authorization: `Bearer ${token}`}\n  };\n\n  request(options, function (error, response, body) {\n    if (error) throw new Error(error);\n    console.log(body);\n  });",
              "name": "node"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/currency": {
      "get": {
        "summary": "개별 currency 조회",
        "description": "",
        "operationId": "개별-currency-조회",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Currency code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"code\": \"BTC\",\n  \"withdraw_fee\": \"0.00005\",\n  \"is_coin\": true,\n  \"wallet_state\": \"working\",\n  \"wallet_support\": [\"deposit\",\"withdraw\"]\n}\n"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "example": "BTC"
                    },
                    "withdraw_fee": {
                      "type": "string",
                      "example": "0.00005"
                    },
                    "is_coin": {
                      "type": "boolean",
                      "example": true,
                      "default": true
                    },
                    "wallet_state": {
                      "type": "string",
                      "example": "working"
                    },
                    "wallet_support": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "deposit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\": \"validation_error\",\n    \"message\": \"code does not have a valid value\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "validation_error"
                        },
                        "message": {
                          "type": "string",
                          "example": "code does not have a valid value"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require(\"request\")\nconst sign = require(\"jsonwebtoken\").sign\nconst queryEncode = require(\"querystring\").encode\n\nconst query = queryEncode({code: code});\nconst payload = {\n  access_key: accessKey,\n  nonce: (new Date).getTime(),\n  query: query\n};\nconst token = sign(payload, secretKey);\n\nvar options = {\n  method: \"GET\",\n  url: \"https://api.upbit.com/v1/currency?\" + query,\n  headers: {Authorization: `Bearer ${token}`}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n  console.log(body);\n});",
              "name": "node"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/order": {
      "get": {
        "summary": "개별 주문 조회",
        "description": "주문 UUID 를 통해 개별 주문건을 조회한다.",
        "operationId": "개별-주문-조회",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "주문 UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "조회용 사용자 지정 값",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"uuid\": \"9ca023a5-851b-4fec-9f0a-48cd83c2eaae\",\n  \"side\": \"ask\",\n  \"ord_type\": \"limit\",\n  \"price\": \"4280000.0\",\n  \"state\": \"done\",\n  \"market\": \"KRW-BTC\",\n  \"created_at\": \"2019-01-04T13:48:09+09:00\",\n  \"volume\": \"1.0\",\n  \"remaining_volume\": \"0.0\",\n  \"reserved_fee\": \"0.0\",\n  \"remaining_fee\": \"0.0\",\n  \"paid_fee\": \"2140.0\",\n  \"locked\": \"0.0\",\n  \"executed_volume\": \"1.0\",\n  \"trades_count\": 1,\n  \"trades\": [\n    {\n      \"market\": \"KRW-BTC\",\n      \"uuid\": \"9e8f8eba-7050-4837-8969-cfc272cbe083\",\n      \"price\": \"4280000.0\",\n      \"volume\": \"1.0\",\n      \"funds\": \"4280000.0\",\n      \"side\": \"ask\"\n    }\n  ]\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "example": "9ca023a5-851b-4fec-9f0a-48cd83c2eaae"
                    },
                    "side": {
                      "type": "string",
                      "example": "ask"
                    },
                    "ord_type": {
                      "type": "string",
                      "example": "limit"
                    },
                    "price": {
                      "type": "string",
                      "example": "4280000.0"
                    },
                    "state": {
                      "type": "string",
                      "example": "done"
                    },
                    "market": {
                      "type": "string",
                      "example": "KRW-BTC"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2019-01-04T13:48:09+09:00"
                    },
                    "volume": {
                      "type": "string",
                      "example": "1.0"
                    },
                    "remaining_volume": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "reserved_fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "remaining_fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "paid_fee": {
                      "type": "string",
                      "example": "2140.0"
                    },
                    "locked": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "executed_volume": {
                      "type": "string",
                      "example": "1.0"
                    },
                    "trades_count": {
                      "type": "integer",
                      "example": 1,
                      "default": 0
                    },
                    "trades": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "market": {
                            "type": "string",
                            "example": "KRW-BTC"
                          },
                          "uuid": {
                            "type": "string",
                            "example": "9e8f8eba-7050-4837-8969-cfc272cbe083"
                          },
                          "price": {
                            "type": "string",
                            "example": "4280000.0"
                          },
                          "volume": {
                            "type": "string",
                            "example": "1.0"
                          },
                          "funds": {
                            "type": "string",
                            "example": "4280000.0"
                          },
                          "side": {
                            "type": "string",
                            "example": "ask"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "text/plain": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\": \"error name\",\n    \"message\": \"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    uuid: '9ca023a5-851b-4fec-9f0a-48cd83c2eaae'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/order?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'uuid': '9ca023a5-851b-4fec-9f0a-48cd83c2eaae',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/order\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    uuid: '9ca023a5-851b-4fec-9f0a-48cd83c2eaae'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/order', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetOrder {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"uuid\", \"9ca023a5-851b-4fec-9f0a-48cd83c2eaae\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/order?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      },
      "delete": {
        "summary": "주문 취소 접수",
        "description": "주문 UUID를 통해 해당 주문에 대한 취소 접수를 한다.",
        "operationId": "주문-취소",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "주문 UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identifier",
            "in": "query",
            "description": "조회용 사용자 지정값",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"uuid\":\"cdd92199-2897-4e14-9448-f923320408ad\",\n  \"side\":\"bid\",\n  \"ord_type\":\"limit\",\n  \"price\":\"100.0\",\n  \"state\":\"wait\",\n  \"market\":\"KRW-BTC\",\n  \"created_at\":\"2018-04-10T15:42:23+09:00\",\n  \"volume\":\"0.01\",\n  \"remaining_volume\":\"0.01\",\n  \"reserved_fee\":\"0.0015\",\n  \"remaining_fee\":\"0.0015\",\n  \"paid_fee\":\"0.0\",\n  \"locked\":\"1.0015\",\n  \"executed_volume\":\"0.0\",\n  \"trades_count\":0\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "example": "cdd92199-2897-4e14-9448-f923320408ad"
                    },
                    "side": {
                      "type": "string",
                      "example": "bid"
                    },
                    "ord_type": {
                      "type": "string",
                      "example": "limit"
                    },
                    "price": {
                      "type": "string",
                      "example": "100.0"
                    },
                    "state": {
                      "type": "string",
                      "example": "wait"
                    },
                    "market": {
                      "type": "string",
                      "example": "KRW-BTC"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-04-10T15:42:23+09:00"
                    },
                    "volume": {
                      "type": "string",
                      "example": "0.01"
                    },
                    "remaining_volume": {
                      "type": "string",
                      "example": "0.01"
                    },
                    "reserved_fee": {
                      "type": "string",
                      "example": "0.0015"
                    },
                    "remaining_fee": {
                      "type": "string",
                      "example": "0.0015"
                    },
                    "paid_fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "locked": {
                      "type": "string",
                      "example": "1.0015"
                    },
                    "executed_volume": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "trades_count": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    uuid: 'cdd92199-2897-4e14-9448-f923320408ad'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"DELETE\",\n    url: server_url + \"/v1/order?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'uuid': 'cdd92199-2897-4e14-9448-f923320408ad',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.delete(server_url + \"/v1/order\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    uuid: 'cdd92199-2897-4e14-9448-f923320408ad'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.delete(server_url + '/v1/order', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class DeleteOrder {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n        \n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"uuid\", \"cdd92199-2897-4e14-9448-f923320408ad\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpDelete request = new HttpDelete(serverUrl + \"/v1/order?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "주문 리스트 조회",
        "description": "주문 리스트를 조회한다.",
        "operationId": "주문-리스트-조회",
        "parameters": [
          {
            "name": "market",
            "in": "query",
            "description": "Market ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "주문 상태",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "주문 상태 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuids",
            "in": "query",
            "description": "주문 UUID의 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "identifiers",
            "in": "query",
            "description": "주문 identifier의 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "요청 페이지",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "요청 개수 (1 ~ 100)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "정렬",
            "schema": {
              "type": "string",
              "default": "desc"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"uuid\": \"9ca023a5-851b-4fec-9f0a-48cd83c2eaae\",\n    \"side\": \"ask\",\n    \"ord_type\": \"limit\",\n    \"price\": \"4280000.0\",\n    \"state\": \"done\",\n    \"market\": \"KRW-BTC\",\n    \"created_at\": \"2019-01-04T13:48:09+09:00\",\n    \"volume\": \"1.0\",\n    \"remaining_volume\": \"0.0\",\n    \"reserved_fee\": \"0.0\",\n    \"remaining_fee\": \"0.0\",\n    \"paid_fee\": \"2140.0\",\n    \"locked\": \"0.0\",\n    \"executed_volume\": \"1.0\",\n    \"trades_count\": 1,\n  }\n  # ....\n]"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst state = 'done'\nconst uuids = [\n    '9ca023a5-851b-4fec-9f0a-48cd83c2eaae',\n    //...\n]\n\nconst non_array_body = {\n    state: state,\n}\nconst array_body = {\n    uuids: uuids,\n}\nconst body = {\n    ...non_array_body,\n    ...array_body\n}\n\nconst uuid_query = uuids.map(uuid => `uuids[]=${uuid}`).join('&')\nconst query = queryEncode(non_array_body) + '&' + uuid_query\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/orders?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'state': 'done',\n}\nquery_string = urlencode(query)\n\nuuids = [\n    '9ca023a5-851b-4fec-9f0a-48cd83c2eaae',\n    #...\n]\nuuids_query_string = '&'.join([\"uuids[]={}\".format(uuid) for uuid in uuids])\n\nquery['uuids[]'] = uuids\nquery_string = \"{0}&{1}\".format(query_string, uuids_query_string).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/orders\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    state: 'done'\n}\n\nuuids = [\n    '9ca023a5-851b-4fec-9f0a-48cd83c2eaae',\n    #...\n]\n\nquery_string = URI.encode_www_form(params) + '&' + uuids.map{|uuid| \"uuids[]=#{uuid}\"}.join('&')\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\nparams[:uuids] = uuids\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/orders', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetOrders {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"state\", \"done\");\n\n        String[] uuids = {\n            \"9ca023a5-851b-4fec-9f0a-48cd83c2eaae\"\n            // ...\n        };\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n        for(String uuid : uuids) {\n            queryElements.add(\"uuids[]=\" + uuid);\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/orders?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      },
      "post": {
        "summary": "주문하기",
        "description": "주문 요청을 한다.",
        "operationId": "주문하기",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "market",
                  "side",
                  "volume",
                  "price",
                  "ord_type"
                ],
                "properties": {
                  "market": {
                    "type": "string",
                    "description": "Market ID"
                  },
                  "side": {
                    "type": "string",
                    "description": "주문 종류"
                  },
                  "volume": {
                    "type": "string",
                    "description": "주문 수량"
                  },
                  "price": {
                    "type": "string",
                    "description": "유닛당 주문 가격"
                  },
                  "ord_type": {
                    "type": "string",
                    "description": "주문 타입"
                  },
                  "identifier": {
                    "type": "string",
                    "description": "조회용 사용자 지정 값"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"uuid\":\"cdd92199-2897-4e14-9448-f923320408ad\",\n  \"side\":\"bid\",\n  \"ord_type\":\"limit\",\n  \"price\":\"100.0\",\n  \"avg_price\":\"0.0\",\n  \"state\":\"wait\",\n  \"market\":\"KRW-BTC\",\n  \"created_at\":\"2018-04-10T15:42:23+09:00\",\n  \"volume\":\"0.01\",\n  \"remaining_volume\":\"0.01\",\n  \"reserved_fee\":\"0.0015\",\n  \"remaining_fee\":\"0.0015\",\n  \"paid_fee\":\"0.0\",\n  \"locked\":\"1.0015\",\n  \"executed_volume\":\"0.0\",\n  \"trades_count\":0\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "example": "cdd92199-2897-4e14-9448-f923320408ad"
                    },
                    "side": {
                      "type": "string",
                      "example": "bid"
                    },
                    "ord_type": {
                      "type": "string",
                      "example": "limit"
                    },
                    "price": {
                      "type": "string",
                      "example": "100.0"
                    },
                    "avg_price": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "state": {
                      "type": "string",
                      "example": "wait"
                    },
                    "market": {
                      "type": "string",
                      "example": "KRW-BTC"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-04-10T15:42:23+09:00"
                    },
                    "volume": {
                      "type": "string",
                      "example": "0.01"
                    },
                    "remaining_volume": {
                      "type": "string",
                      "example": "0.01"
                    },
                    "reserved_fee": {
                      "type": "string",
                      "example": "0.0015"
                    },
                    "remaining_fee": {
                      "type": "string",
                      "example": "0.0015"
                    },
                    "paid_fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "locked": {
                      "type": "string",
                      "example": "1.0015"
                    },
                    "executed_volume": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "trades_count": {
                      "type": "integer",
                      "example": 0,
                      "default": 0
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    market: 'KRW-BTC',\n    side: 'bid',\n    volume: '0.01',\n    price: '100',\n    ord_type: 'limit',\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"POST\",\n    url: server_url + \"/v1/orders\",\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'market': 'KRW-BTC',\n    'side': 'bid',\n    'volume': '0.01',\n    'price': '100.0',\n    'ord_type': 'limit',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.post(server_url + \"/v1/orders\", params=query, headers=headers)"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    market: 'KRW-BTC',\n    side: 'bid',\n    volume: '0.01',\n    price: '100',\n    ord_type: 'limit'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.post(server_url + '/v1/orders', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.google.gson.Gson;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class PostOrders {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"market\", \"KRW-BTC\");\n        params.put(\"side\", \"bid\");\n        params.put(\"volume\", \"0.01\");\n        params.put(\"price\", \"100\");\n        params.put(\"ord_type\", \"limit\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpPost request = new HttpPost(serverUrl + \"/v1/orders\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n            request.setEntity(new StringEntity(new Gson().toJson(params)));\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/orders/chance": {
      "get": {
        "summary": "주문 가능 정보",
        "description": "마켓별 주문 가능 정보를 확인한다.",
        "operationId": "주문-가능-정보",
        "parameters": [
          {
            "name": "market",
            "in": "query",
            "description": "Market ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"bid_fee\": \"0.0015\",\n  \"ask_fee\": \"0.0015\",\n  \"market\": {\n    \"id\": \"KRW-BTC\",\n    \"name\": \"BTC/KRW\",\n    \"order_types\": [\n      \"limit\"\n    ],\n    \"order_sides\": [\n      \"ask\",\n      \"bid\"\n    ],\n    \"bid\": {\n      \"currency\": \"KRW\",\n      \"price_unit\": null,\n      \"min_total\": 1000\n    },\n    \"ask\": {\n      \"currency\": \"BTC\",\n      \"price_unit\": null,\n      \"min_total\": 1000\n    },\n    \"max_total\": \"100000000.0\",\n    \"state\": \"active\",\n  },\n  \"bid_account\": {\n    \"currency\": \"KRW\",\n    \"balance\": \"0.0\",\n    \"locked\": \"0.0\",\n    \"avg_buy_price\": \"0\",\n    \"avg_buy_price_modified\": false,\n    \"unit_currency\": \"KRW\",\n  },\n  \"ask_account\": {\n    \"currency\": \"BTC\",\n    \"balance\": \"10.0\",\n    \"locked\": \"0.0\",\n    \"avg_buy_price\": \"8042000\",\n    \"avg_buy_price_modified\": false,\n    \"unit_currency\": \"KRW\",\n  }\n}"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    market: 'KRW-BTC'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/orders/chance?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'market': 'KRW-ETH',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/orders/chance\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    market: 'KRW-BTC'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/orders/chance', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetOrdersChance {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"market\", \"KRW-BTC\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/orders/chance?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/withdraws": {
      "get": {
        "summary": "출금 리스트 조회",
        "description": "",
        "operationId": "전체-출금-조회",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency 코드",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "출금 상태",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuids",
            "in": "query",
            "description": "출금 UUID의 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "txids",
            "in": "query",
            "description": "출금 TXID의 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "갯수 제한",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "정렬",
            "schema": {
              "type": "string",
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"type\": \"withdraw\",\n    \"uuid\": \"35a4f1dc-1db5-4d6b-89b5-7ec137875956\",\n    \"currency\": \"XRP\",\n    \"txid\": \"98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc\",\n    \"state\": \"DONE\",\n    \"created_at\": \"2019-02-28T15:17:51+09:00\",\n    \"done_at\": \"2019-02-28T15:22:12+09:00\",\n    \"amount\": \"1.00\",\n    \"fee\": \"0.0\",\n    \"transaction_type\": \"default\"\n  }\n  # ....\n]"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst currency = 'XRP'\nconst state = 'done'\nconst txids = [\n    '98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc',\n    // ...\n]\n\nconst non_array_body = {\n    currency: currency,\n    state: state,\n}\nconst array_body = {\n    txids: txids,\n}\nconst body = {\n    ...non_array_body,\n    ...array_body\n}\n\nconst txid_query = txids.map(txid => `txids[]=${txid}`).join('&')\nconst query = queryEncode(non_array_body) + '&' + txid_query\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/withdraws?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'currency': 'XRP',\n    'state': 'done',\n}\nquery_string = urlencode(query)\n\ntxids = [\n    '98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc',\n    #...\n]\ntxids_query_string = '&'.join([\"txids[]={}\".format(txid) for txid in txids])\n\nquery['txids[]'] = txids\nquery_string = \"{0}&{1}\".format(query_string, txids_query_string).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/withdraws\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    currency: 'XRP',\n    state: 'done'\n}\n\ntxids = [\n    '98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc',\n    #...\n]\n\nquery_string = URI.encode_www_form(params) + '&' + txids.map{|txid| \"txids[]=#{txid}\"}.join('&')\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\nparams[:txids] = txids\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/withdraws', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetWithdraws {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n        \n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"currency\", \"XRP\");\n\n        String[] txids = {\n            \"98c15999f0bdc4ae0e8a-ed35868bb0c204fe6ec29e4058a3451e-88636d1040f4baddf943274ce37cf9cc\"\n            //...\n        };\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n        for(String txid : txids) {\n            queryElements.add(\"txids[]=\" + txid);\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/withdraws?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/withdraws/krw": {
      "post": {
        "summary": "원화 출금하기",
        "description": "원화 출금을 요청한다. 등록된 출금 계좌로 출금된다.",
        "operationId": "원화-출금하기",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "출금 원화 수량"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"type\": \"withdraw\",\n  \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n  \"currency\": \"KRW\",\n  \"txid\": \"ebe6937b-130e-4066-8ac6-4b0e67f28adc\",\n  \"state\": \"processing\",\n  \"created_at\": \"2018-04-13T11:24:01+09:00\",\n  \"done_at\": null,\n  \"amount\": \"10000\",\n  \"fee\": \"0.0\",\n  \"transaction_type\": \"default\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "withdraw"
                    },
                    "uuid": {
                      "type": "string",
                      "example": "9f432943-54e0-40b7-825f-b6fec8b42b79"
                    },
                    "currency": {
                      "type": "string",
                      "example": "KRW"
                    },
                    "txid": {
                      "type": "string",
                      "example": "ebe6937b-130e-4066-8ac6-4b0e67f28adc"
                    },
                    "state": {
                      "type": "string",
                      "example": "processing"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-04-13T11:24:01+09:00"
                    },
                    "done_at": {},
                    "amount": {
                      "type": "string",
                      "example": "10000"
                    },
                    "fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "transaction_type": {
                      "type": "string",
                      "example": "default"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    amount: '10000'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"POST\",\n    url: server_url + \"/v1/withdraws/krw\",\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'amount': '10000',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.post(server_url + \"/v1/withdraws/krw\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    amount: '10000'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.post(server_url + '/v1/withdraws/krw', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.google.gson.Gson;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class PostWithdrawsKrw {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"amount\", \"10000\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpPost request = new HttpPost(serverUrl + \"/v1/withdraws/krw\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n            request.setEntity(new StringEntity(new Gson().toJson(params)));\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/withdraws/chance": {
      "get": {
        "summary": "출금 가능 정보",
        "description": "해당 통화의 가능한 출금 정보를 확인한다.",
        "operationId": "출금-가능-정보",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency symbol",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"member_level\": {\n    \"security_level\": 3,\n    \"fee_level\": 0,\n    \"email_verified\": true,\n    \"identity_auth_verified\": true,\n    \"bank_account_verified\": true,\n    \"kakao_pay_auth_verified\": false,\n    \"locked\": false,\n    \"wallet_locked\": false\n  },\n  \"currency\": {\n    \"code\": \"BTC\",\n    \"withdraw_fee\": \"0.0005\",\n    \"is_coin\": true,\n    \"wallet_state\": \"working\",\n    \"wallet_support\": [\n      \"deposit\",\n      \"withdraw\"\n    ]\n  },\n  \"account\": {\n    \"currency\": \"BTC\",\n    \"balance\": \"10.0\",\n    \"locked\": \"0.0\",\n    \"avg_buy_price\": \"8042000\",\n    \"avg_buy_price_modified\": false,\n    \"unit_currency\": \"KRW\",\n  },\n  \"withdraw_limit\": {\n    \"currency\": \"BTC\",\n    \"minimum\": null,\n    \"onetime\": null,\n    \"daily\": \"10.0\",\n    \"remaining_daily\": \"10.0\",\n    \"remaining_daily_krw\": \"0.0\",\n    \"fixed\": null,\n    \"can_withdraw\": true\n  }\n}"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    currency: 'BTC'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/withdraws/chance?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'currency': 'BTC',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/withdraws/chance\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    currency: 'BTC'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/withdraws/chance', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetWithdrawsChance {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"currency\", \"BTC\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/withdraws/chance?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/withdraws/coin": {
      "post": {
        "summary": "코인 출금하기",
        "description": "코인 출금을 요청한다.",
        "operationId": "코인-출금하기",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currency",
                  "amount",
                  "address"
                ],
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Currency symbol"
                  },
                  "amount": {
                    "type": "string",
                    "description": "출금 코인 수량"
                  },
                  "address": {
                    "type": "string",
                    "description": "출금 지갑 주소"
                  },
                  "secondary_address": {
                    "type": "string",
                    "description": "2차 출금주소 (필요한 코인에 한해서)"
                  },
                  "transaction_type": {
                    "type": "string",
                    "description": "출금 유형",
                    "default": "default"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"type\": \"withdraw\",\n  \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n  \"currency\": \"BTC\",\n  \"txid\": \"ebe6937b-130e-4066-8ac6-4b0e67f28adc\",\n  \"state\": \"processing\",\n  \"created_at\": \"2018-04-13T11:24:01+09:00\",\n  \"done_at\": null,\n  \"amount\": \"0.01\",\n  \"fee\": \"0.0\",\n  \"krw_amount\": \"80420.0\",\n  \"transaction_type\": \"default\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "withdraw"
                    },
                    "uuid": {
                      "type": "string",
                      "example": "9f432943-54e0-40b7-825f-b6fec8b42b79"
                    },
                    "currency": {
                      "type": "string",
                      "example": "BTC"
                    },
                    "txid": {
                      "type": "string",
                      "example": "ebe6937b-130e-4066-8ac6-4b0e67f28adc"
                    },
                    "state": {
                      "type": "string",
                      "example": "processing"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-04-13T11:24:01+09:00"
                    },
                    "done_at": {},
                    "amount": {
                      "type": "string",
                      "example": "0.01"
                    },
                    "fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "krw_amount": {
                      "type": "string",
                      "example": "80420.0"
                    },
                    "transaction_type": {
                      "type": "string",
                      "example": "default"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    currency: 'BTC',\n    amount: '0.01',\n    address: '3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD',\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"POST\",\n    url: server_url + \"/v1/withdraws/coin\",\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'currency': 'BTC',\n    'amount': '0.01',\n    'address': '3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.post(server_url + \"/v1/withdraws/coin\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    currency: 'BTC',\n    amount: '0.01',\n    address: '3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.post(server_url + '/v1/withdraws/coin', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.google.gson.Gson;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class PostWithdrawsCoin {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"currency\", \"BTC\");\n        params.put(\"amount\", \"0.01\");\n        params.put(\"address\", \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpPost request = new HttpPost(serverUrl + \"/v1/withdraws/coin\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n            request.setEntity(new StringEntity(new Gson().toJson(params)));\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/withdraw": {
      "get": {
        "summary": "개별 출금 조회",
        "description": "출금 UUID를 통해 개별 출금 정보를 조회한다.",
        "operationId": "개별-출금-조회",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "출금 UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization (JWT)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txid",
            "in": "query",
            "description": "출금 TXID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency 코드",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"type\": \"withdraw\",\n  \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n  \"currency\": \"BTC\",\n  \"txid\": null,\n  \"state\": \"processing\",\n  \"created_at\": \"2018-04-13T11:24:01+09:00\",\n  \"done_at\": null,\n  \"amount\": \"0.01\",\n  \"fee\": \"0.0\",\n  \"transaction_type\": \"default\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "withdraw"
                    },
                    "uuid": {
                      "type": "string",
                      "example": "9f432943-54e0-40b7-825f-b6fec8b42b79"
                    },
                    "currency": {
                      "type": "string",
                      "example": "BTC"
                    },
                    "txid": {},
                    "state": {
                      "type": "string",
                      "example": "processing"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-04-13T11:24:01+09:00"
                    },
                    "done_at": {},
                    "amount": {
                      "type": "string",
                      "example": "0.01"
                    },
                    "fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "transaction_type": {
                      "type": "string",
                      "example": "default"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    uuid: '9f432943-54e0-40b7-825f-b6fec8b42b79'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/withdraw?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'uuid': '9f432943-54e0-40b7-825f-b6fec8b42b79'\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/withdraw\", params=query, headers=headers)\n\nprint(res.json())\n"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    uuid: '9f432943-54e0-40b7-825f-b6fec8b42b79'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/withdraw', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetWithdraw {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"uuid\", \"9f432943-54e0-40b7-825f-b6fec8b42b79\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/withdraw?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/deposits/coin_addresses": {
      "get": {
        "summary": "전체 입금 주소 조회",
        "description": "내가 보유한 자산 리스트를 보여줍니다.",
        "operationId": "전체-입금-주소-조회",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"currency\": \"BTC\",\n    \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n    \"secondary_address\": null\n  },\n  {\n    \"currency\": \"ETH\",\n    \"deposit_address\": \"0x0d73e0a482b8cf568976d2e8688f4a899d29301c\",\n    \"secondary_address\": null\n  },\n  {\n    \"currency\": \"XRP\",\n    \"deposit_address\": \"rN9qNpgnBaZwqCg8CvUZRPqCcPPY7wfWep\",\n    \"secondary_address\": \"3057887915\"\n  }\n]"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "example": "BTC"
                      },
                      "deposit_address": {
                        "type": "string",
                        "example": "3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD"
                      },
                      "secondary_address": {}
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst sign = require('jsonwebtoken').sign\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/deposits/coin_addresses\",\n    headers: {Authorization: `Bearer ${token}`},\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/deposits/coin_addresses\", headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n}\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/deposits/coin_addresses', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class GetDepositsCoinAddresses {\n\n    public static void main(String[] args) {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/deposits/coin_addresses\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/deposit": {
      "get": {
        "summary": "개별 입금 조회",
        "description": "",
        "operationId": "개별-입금-조회",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "개별 입금의 UUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txid",
            "in": "query",
            "description": "개별 입금의 TXID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency 코드",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{ \n  \"type\": \"deposit\",\n  \"uuid\": \"94332e99-3a87-4a35-ad98-28b0c969f830\",\n  \"currency\": \"KRW\",\n  \"txid\": \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n  \"state\": \"ACCEPTED\",\n  \"created_at\": \"2017-12-08T15:38:02+09:00\",\n  \"done_at\": \"2017-12-08T15:38:02+09:00\",\n  \"amount\": \"100000.0\",\n  \"fee\": \"0.0\",\n  \"transaction_type\": \"default\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "deposit"
                    },
                    "uuid": {
                      "type": "string",
                      "example": "94332e99-3a87-4a35-ad98-28b0c969f830"
                    },
                    "currency": {
                      "type": "string",
                      "example": "KRW"
                    },
                    "txid": {
                      "type": "string",
                      "example": "9e37c537-6849-4c8b-a134-57313f5dfc5a"
                    },
                    "state": {
                      "type": "string",
                      "example": "ACCEPTED"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2017-12-08T15:38:02+09:00"
                    },
                    "done_at": {
                      "type": "string",
                      "example": "2017-12-08T15:38:02+09:00"
                    },
                    "amount": {
                      "type": "string",
                      "example": "100000.0"
                    },
                    "fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "transaction_type": {
                      "type": "string",
                      "example": "default"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    uuid: '94332e99-3a87-4a35-ad98-28b0c969f830'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/deposit?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'uuid': '94332e99-3a87-4a35-ad98-28b0c969f830',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/deposit\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    uuid: '94332e99-3a87-4a35-ad98-28b0c969f830'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/deposit', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetDeposit {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"uuid\", \"94332e99-3a87-4a35-ad98-28b0c969f830\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/deposit?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/deposits": {
      "get": {
        "summary": "입금 리스트 조회",
        "description": "",
        "operationId": "입금-리스트-조회",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency 코드",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "입금 상태",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuids",
            "in": "query",
            "description": "입금 UUID의 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "txids",
            "in": "query",
            "description": "입금 TXID의 목록",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "페이지당 개수",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "페이지 번호",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "정렬 방식",
            "schema": {
              "type": "string",
              "default": "desc"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token(JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  { \n    \"type\": \"deposit\",\n    \"uuid\": \"94332e99-3a87-4a35-ad98-28b0c969f830\",\n    \"currency\": \"KRW\",\n    \"txid\": \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n    \"state\": \"ACCEPTED\",\n    \"created_at\": \"2017-12-08T15:38:02+09:00\",\n    \"done_at\": \"2017-12-08T15:38:02+09:00\",\n    \"amount\": \"100000.0\",\n    \"fee\": \"0.0\",\n    \"transaction_type\": \"default\"\n  }\n  #....\n]"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst currency = 'KRW'\nconst txids = [\n    '9e37c537-6849-4c8b-a134-57313f5dfc5a',\n    // ...\n]\n\nconst non_array_body = {\n    currnecy: currency,\n}\nconst array_body = {\n    txids: txids,\n}\nconst body = {\n    ...non_array_body,\n    ...array_body\n}\n\nconst txid_query = txids.map(txid => `txids[]=${txid}`).join('&')\nconst query = queryEncode(non_array_body) + '&' + txid_query\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/deposits?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'currency': 'KRW',\n}\nquery_string = urlencode(query)\n\ntxids = [\n    '9e37c537-6849-4c8b-a134-57313f5dfc5a',\n    #...\n]\ntxids_query_string = '&'.join([\"txids[]={}\".format(txid) for txid in txids])\n\nquery['txids[]'] = txids\nquery_string = \"{0}&{1}\".format(query_string, txids_query_string).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/deposits\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    currency: \"KRW\",\n}\n\ntxids = [\n  '9e37c537-6849-4c8b-a134-57313f5dfc5a',\n  # ...\n]\n\nquery_string = URI.encode_www_form(params) + '&' + txids.map{|txid| \"txids[]=#{txid}\"}.join('&')\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\nparams[:txids] = txids\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/deposits', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetDeposits {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n        \n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"currency\", \"KRW\");\n\n        String[] txids = {\n            \"9e37c537-6849-4c8b-a134-57313f5dfc5a\",\n            //...\n        };\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n        for(String txid : txids) {\n            queryElements.add(\"txids[]=\" + txid);\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/deposits?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/deposits/coin_address": {
      "get": {
        "summary": "개별 입금 주소 조회",
        "description": "",
        "operationId": "개별-입금-줏-조회",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Currency symbol",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"currency\": \"BTC\",\n  \"deposit_address\": \"3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD\",\n  \"secondary_address\": null\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "currency": {
                      "type": "string",
                      "example": "BTC"
                    },
                    "deposit_address": {
                      "type": "string",
                      "example": "3EusRwybuZUhVDeHL7gh3HSLmbhLcy7NqD"
                    },
                    "secondary_address": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    currency: 'BTC',\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/deposits/coin_address?\" + query,\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'currency': 'BTC',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/deposits/coin_address\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    currency: 'BTC',\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/deposits/coin_address', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class GetDepositsCoinAddress {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"currency\", \"BTC\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/deposits/coin_address?\" + queryString);\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/deposits/generate_coin_address": {
      "post": {
        "summary": "입금 주소 생성 요청",
        "description": "입금 주소 생성을 요청한다.",
        "operationId": "입금-주소-생성-요청",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currency"
                ],
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Currency symbol"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"success\": true,\n  \"message\": \"BTC 입금주소를 생성중입니다.\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true,
                      "default": true
                    },
                    "message": {
                      "type": "string",
                      "example": "BTC 입금주소를 생성중입니다."
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    currency: 'BTC',\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"POST\",\n    url: server_url + \"/v1/deposits/generate_coin_address\",\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'currency': 'BTC',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.post(server_url + \"/v1/deposits/generate_coin_address\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    currency: 'BTC',\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.post(server_url + '/v1/deposits/generate_coin_address', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.google.gson.Gson;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class PostDepositsGenerateCoinAddress {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"currency\", \"BTC\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpPost request = new HttpPost(serverUrl + \"/v1/deposits/generate_coin_address\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n            request.setEntity(new StringEntity(new Gson().toJson(params)));\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "전체 계좌 조회",
        "description": "내가 보유한 자산 리스트를 보여줍니다.",
        "operationId": "전체-계좌-조회",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"currency\":\"KRW\",\n    \"balance\":\"1000000.0\",\n    \"locked\":\"0.0\",\n    \"avg_buy_price\":\"0\",\n    \"avg_buy_price_modified\":false,\n    \"unit_currency\": \"KRW\",\n  },\n  {\n    \"currency\":\"BTC\",\n    \"balance\":\"2.0\",\n    \"locked\":\"0.0\",\n    \"avg_buy_price\":\"101000\",\n    \"avg_buy_price_modified\":false,\n    \"unit_currency\": \"KRW\",\n  }\n]"
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst sign = require('jsonwebtoken').sign\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/accounts\",\n    headers: {Authorization: `Bearer ${token}`},\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/accounts\", headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/accounts', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class GetAccounts {\n\n    public static void main(String[] args) {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/accounts\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/status/wallet": {
      "get": {
        "summary": "입출금 현황",
        "description": "입출금 현황 및 블록 상태를 조회합니다.",
        "operationId": "입출금-현황",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"currency\": \"BTC\",\n    \"wallet_state\": \"working\",\n    \"block_state\": \"normal\",\n    \"block_height\": 637432,\n    \"block_updated_at\": \"2020-07-03T02:04:45.523+00:00\"\n  }\n]"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "currency": {
                        "type": "string",
                        "example": "BTC"
                      },
                      "wallet_state": {
                        "type": "string",
                        "example": "working"
                      },
                      "block_state": {
                        "type": "string",
                        "example": "normal"
                      },
                      "block_height": {
                        "type": "integer",
                        "example": 637432,
                        "default": 0
                      },
                      "block_updated_at": {
                        "type": "string",
                        "example": "2020-07-03T02:04:45.523+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst sign = require('jsonwebtoken').sign\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/status/wallet\",\n    headers: {Authorization: `Bearer ${token}`},\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/status/wallet\", headers=headers)\n\nprint(res.json())",
              "name": "Python"
            },
            {
              "language": "ruby",
              "code": "require 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/status/wallet', params, Authorization: authorize_token)\nputs res.body",
              "name": "Ruby"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class GetAccounts {\n    public static void main(String[] args) {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/status/wallet\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
              "name": "Java"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/deposits/krw": {
      "post": {
        "summary": "원화 입금하기",
        "description": "원화 입금을 요청한다.",
        "operationId": "원화-입금하기",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token (JWT)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "입금 원화 수량"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"type\": \"deposit\",\n  \"uuid\": \"9f432943-54e0-40b7-825f-b6fec8b42b79\",\n  \"currency\": \"KRW\",\n  \"txid\": \"ebe6937b-130e-4066-8ac6-4b0e67f28adc\",\n  \"state\": \"processing\",\n  \"created_at\": \"2018-04-13T11:24:01+09:00\",\n  \"done_at\": null,\n  \"amount\": \"10000\",\n  \"fee\": \"0.0\",\n  \"transaction_type\": \"default\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "deposit"
                    },
                    "uuid": {
                      "type": "string",
                      "example": "9f432943-54e0-40b7-825f-b6fec8b42b79"
                    },
                    "currency": {
                      "type": "string",
                      "example": "KRW"
                    },
                    "txid": {
                      "type": "string",
                      "example": "ebe6937b-130e-4066-8ac6-4b0e67f28adc"
                    },
                    "state": {
                      "type": "string",
                      "example": "processing"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2018-04-13T11:24:01+09:00"
                    },
                    "done_at": {},
                    "amount": {
                      "type": "string",
                      "example": "10000"
                    },
                    "fee": {
                      "type": "string",
                      "example": "0.0"
                    },
                    "transaction_type": {
                      "type": "string",
                      "example": "default"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "description": "4XX",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"error\": {\n    \"name\":\"error name\",\n    \"message\":\"error message\"\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "error name"
                        },
                        "message": {
                          "type": "string",
                          "example": "error message"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst crypto = require('crypto')\nconst sign = require('jsonwebtoken').sign\nconst queryEncode = require(\"querystring\").encode\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst body = {\n    amount: '10000'\n}\n\nconst query = queryEncode(body)\n\nconst hash = crypto.createHash('sha512')\nconst queryHash = hash.update(query, 'utf-8').digest('hex')\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n    query_hash: queryHash,\n    query_hash_alg: 'SHA512',\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"POST\",\n    url: server_url + \"/v1/deposits/krw\",\n    headers: {Authorization: `Bearer ${token}`},\n    json: body\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\nquery = {\n    'amount': '10000',\n}\nquery_string = urlencode(query).encode()\n\nm = hashlib.sha512()\nm.update(query_string)\nquery_hash = m.hexdigest()\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n    'query_hash': query_hash,\n    'query_hash_alg': 'SHA512',\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.post(server_url + \"/v1/deposits/krw\", params=query, headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "#!/usr/bin/env ruby\n\nrequire 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n    amount: '10000'\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n    query_hash: query_hash,\n    query_hash_alg: 'SHA512',\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.post(server_url + '/v1/deposits/krw', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.google.gson.Gson;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class PostWithdrawsKrw {\n\n    public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        HashMap<String, String> params = new HashMap<>();\n        params.put(\"amount\", \"10000\");\n\n        ArrayList<String> queryElements = new ArrayList<>();\n        for(Map.Entry<String, String> entity : params.entrySet()) {\n            queryElements.add(entity.getKey() + \"=\" + entity.getValue());\n        }\n\n        String queryString = String.join(\"&\", queryElements.toArray(new String[0]));\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n        md.update(queryString.getBytes(\"UTF-8\"));\n\n        String queryHash = String.format(\"%0128x\", new BigInteger(1, md.digest()));\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .withClaim(\"query_hash\", queryHash)\n                .withClaim(\"query_hash_alg\", \"SHA512\")\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpPost request = new HttpPost(serverUrl + \"/v1/deposits/krw\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n            request.setEntity(new StringEntity(new Gson().toJson(params)));\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    },
    "/api_keys": {
      "get": {
        "summary": "API 키 리스트 조회",
        "description": "API 키 목록 및 만료 일자를 조회합니다.",
        "operationId": "open-api-키-리스트-조회",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "[\n  {\n    \"access_key\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"expire_at\": \"2021-03-09T12:39:39+00:00\"\n  }\n]"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access_key": {
                        "type": "string",
                        "example": "xxxxxxxxxxxxxxxxxxxxxxxx"
                      },
                      "expire_at": {
                        "type": "string",
                        "example": "2021-03-09T12:39:39+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "const request = require('request')\nconst uuidv4 = require(\"uuid/v4\")\nconst sign = require('jsonwebtoken').sign\n\nconst access_key = process.env.UPBIT_OPEN_API_ACCESS_KEY\nconst secret_key = process.env.UPBIT_OPEN_API_SECRET_KEY\nconst server_url = process.env.UPBIT_OPEN_API_SERVER_URL\n\nconst payload = {\n    access_key: access_key,\n    nonce: uuidv4(),\n}\n\nconst token = sign(payload, secret_key)\n\nconst options = {\n    method: \"GET\",\n    url: server_url + \"/v1/api_keys\",\n    headers: {Authorization: `Bearer ${token}`},\n}\n\nrequest(options, (error, response, body) => {\n    if (error) throw new Error(error)\n    console.log(body)\n})",
              "name": "Node"
            },
            {
              "language": "python",
              "code": "import os\nimport jwt\nimport uuid\nimport hashlib\nfrom urllib.parse import urlencode\n\nimport requests\n\naccess_key = os.environ['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = os.environ['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = os.environ['UPBIT_OPEN_API_SERVER_URL']\n\npayload = {\n    'access_key': access_key,\n    'nonce': str(uuid.uuid4()),\n}\n\njwt_token = jwt.encode(payload, secret_key)\nauthorize_token = 'Bearer {}'.format(jwt_token)\nheaders = {\"Authorization\": authorize_token}\n\nres = requests.get(server_url + \"/v1/api_keys\", headers=headers)\n\nprint(res.json())"
            },
            {
              "language": "ruby",
              "code": "require 'securerandom'\nrequire 'bundler/inline'\ngemfile do\n  source 'https://rubygems.org'\n  gem 'jwt'\n  gem 'faraday'\nend\n\naccess_key = ENV['UPBIT_OPEN_API_ACCESS_KEY']\nsecret_key = ENV['UPBIT_OPEN_API_SECRET_KEY']\nserver_url = ENV['UPBIT_OPEN_API_SERVER_URL']\n\nparams = {\n}\n\nquery_string = URI.encode_www_form(params)\nquery_hash = Digest::SHA512.hexdigest(query_string)\n\npayload = {\n    access_key: access_key,\n    nonce: SecureRandom.uuid,\n}\n\njwt_token = JWT.encode(payload, secret_key, 'HS256')\nauthorize_token = \"Bearer #{jwt_token}\"\n\nres = Faraday.get(server_url + '/v1/api_keys', params, Authorization: authorize_token)\nputs res.body"
            },
            {
              "language": "java",
              "code": "package main;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.util.UUID;\n\npublic class GetAccounts {\n    public static void main(String[] args) {\n        String accessKey = System.getenv(\"UPBIT_OPEN_API_ACCESS_KEY\");\n        String secretKey = System.getenv(\"UPBIT_OPEN_API_SECRET_KEY\");\n        String serverUrl = System.getenv(\"UPBIT_OPEN_API_SERVER_URL\");\n\n        Algorithm algorithm = Algorithm.HMAC256(secretKey);\n        String jwtToken = JWT.create()\n                .withClaim(\"access_key\", accessKey)\n                .withClaim(\"nonce\", UUID.randomUUID().toString())\n                .sign(algorithm);\n\n        String authenticationToken = \"Bearer \" + jwtToken;\n\n        try {\n            HttpClient client = HttpClientBuilder.create().build();\n            HttpGet request = new HttpGet(serverUrl + \"/v1/api_keys\");\n            request.setHeader(\"Content-Type\", \"application/json\");\n            request.addHeader(\"Authorization\", authenticationToken);\n\n            HttpResponse response = client.execute(request);\n            HttpEntity entity = response.getEntity();\n\n            System.out.println(EntityUtils.toString(entity, \"UTF-8\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
            }
          ],
          "samples-languages": [
            "javascript",
            "python",
            "ruby",
            "java"
          ]
        }
      }
    }
  },
  "x-readme": {
    "headers": []
  },
  "x-readme-fauxas": true
}